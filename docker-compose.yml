version: '3.5'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    networks:
      - scheduling-kafka
    
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker1:
    image: confluentinc/cp-kafka:latest
    hostname: broker1
    container_name: broker1
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    networks:
      - scheduling-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

  broker2:
    image: confluentinc/cp-kafka:latest
    hostname: broker2
    container_name: broker2
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "29093:29093"
      - "9093:9093"
      - "9102:9102"    
    networks:
      - scheduling-kafka
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9102
      KAFKA_JMX_HOSTNAME: localhost

  broker3:
    image: confluentinc/cp-kafka:latest
    hostname: broker3
    container_name: broker3
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "29094:29094"
      - "9094:9094"
      - "9103:9103"
    networks:
      - scheduling-kafka
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9103
      KAFKA_JMX_HOSTNAME: localhost

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    restart: unless-stopped
    depends_on:
      - broker1
      - broker2
      - broker3
    ports:
      - "8081:8081"    
    networks:
      - scheduling-kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:29093,broker3:29094'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  ksqldb-server:
    #image: confluentinc/cp-ksqldb-server:6.2.1
    image: confluentinc/cp-ksqldb-server:latest
    hostname: ksqldb-server
    container_name: ksqldb-server
    restart: unless-stopped
    depends_on:
      - broker1
      - broker2
      - broker3
    ports:
      - "8088:8088"    
    networks:
      - scheduling-kafka
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker1:29092,broker2:29093,broker3:29094"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
      KSQL_AUTO_OFFSET_RESET: 'earliest'
      KSQL_KSQL_QUERY_PULL_TABLE_SCAN_ENABLED: 'true'

  rest-proxy:
    image: confluentinc/cp-kafka-rest:latest
    hostname: rest-proxy
    container_name: rest-proxy
    restart: unless-stopped
    depends_on:
      - broker1
      - broker2
      - broker3
      - schema-registry
    ports:
      - 8082:8082    
    networks:
      - scheduling-kafka
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:29093,broker3:29094'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  topic-init:
    image: confluentinc/cp-kafka:latest
    container_name: topic-init
    depends_on:
      - broker1
      - broker2
      - broker3
      - rest-proxy
    volumes:
      - .\scripts\topics\:/data/scripts/
    networks:
      - scheduling-kafka
    entrypoint:
      - bash 
      - /data/scripts/topic-init.sh
  
  schema-init:
    image: bash:latest
    container_name: schema-init
    depends_on:
      - schema-registry
    volumes:
      - .\scripts\schemas\:/data/scripts/
      - .\KafkaTesting\protos\:/data/protos/
    networks:
      - scheduling-kafka
    entrypoint:
      - bash
      - /data/scripts/schema-init.sh

  ksqldb-init:
    image: confluentinc/cp-ksqldb-cli:latest
    container_name: ksqldb-init
    depends_on:
      - schema-registry
    volumes:
      - .\scripts\ksql\:/data/scripts/    
    networks:
      - scheduling-kafka
    entrypoint:
      - bash
      - /data/scripts/ksqldb-init.sh

networks:
  scheduling-kafka:
    name: scheduling-kafka